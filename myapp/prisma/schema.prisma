datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "windows"]
}

model User {
  id           Int                     @id @default(autoincrement())
  firstName    String
  lastName     String
  register     String @unique
  penalty      Penalty[]
  transport    Transport[]
  notifications PermissionNotification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  phoneNumber  String @unique
  password String?
  image String @default("https://res.cloudinary.com/dszot6j60/image/upload/v1740139778/samples/smile.jpg")
}

model PermissionNotification {
  id      Int    @id @default(autoincrement())
  message String
  userId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user    User   @relation(fields: [userId], references: [id])
}

model Penalty {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  amount  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  carId   Int
  car     Car    @relation(fields: [carId], references: [id])
  paid    Boolean @default(false)
}

model Car {
  id           Int           @id @default(autoincrement())
  axleCount    Int
  buildYear    String
  cabinNumber  String        @unique
  capacity     String
  className    String
  colorName    String
  countryName  String
  fuelType     String
  height       String
  importDate   DateTime
  length       String
  manCount     Int
  markName     String
  mass         String
  modelName    String
  motorNumber  String
  ownerType    OwnerType
  plateNumber  String
  type         String
  wheelPosition WheelPosition
  width        String
  penalties    Penalty[]
  transport    Transport[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transport {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  carId         Int 
  car           Car           @relation(fields: [carId], references: [id])
  status        Boolean       @default(false)
  areas         Area[]
  notifications Notification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CallCenter {
  id            Int           @id @default(autoincrement())
  email         String @unique
  password      String
  areaId        Int
  area          Area          @relation(fields: [areaId], references: [id])
  notifications Notification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Area {
  id           Int          @id @default(autoincrement())
  transports   Transport[]
  area         Json
  callCenters  CallCenter[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id           Int        @id @default(autoincrement())
  transportId  Int
  transport    Transport  @relation(fields: [transportId], references: [id])
  callCenterId Int 
  callCenter   CallCenter @relation(fields: [callCenterId], references: [id])
  message      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OwnerType {
  PERSON
  COMPANY
}

enum WheelPosition {
  RIGHT
  LEFT
}